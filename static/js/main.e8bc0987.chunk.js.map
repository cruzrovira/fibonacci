{"version":3,"sources":["components/form.js","components/graph.js","components/helperMath.js","App.js","serviceWorker.js","index.js"],"names":["FormStyled","styled","form","Form","addNiterations","useForm","register","handleSubmit","errors","onSubmit","data","e","nIterations","parseInt","console","log","target","reset","className","htmlFor","type","name","id","ref","required","pattern","value","GraphStyled","div","Graph","label","reply","push","i","fibonacci","axes","primary","position","AppStyled","App","useState","setnIterations","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"u2BAGA,IAAMA,EAAaC,IAAOC,KAAV,KA+DDC,EAhCF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EACQC,cAAnCC,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,aAAcC,EADG,EACHA,OAOhC,OACE,kBAACR,EAAD,CAAYS,SAAUF,GAPP,SAACG,EAAMC,GACtBD,EAAKE,YAAcC,SAASH,EAAKE,aACjCE,QAAQC,IAAIL,GACZN,EAAeM,GACfC,EAAEK,OAAOC,YAIP,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,eAAf,0BACA,2BACEC,KAAK,OACLC,KAAK,cACLC,GAAG,cACHC,IAAKjB,EAAS,CAAEkB,UAAU,EAAMC,QAAS,YAE1CjB,EAAOI,aAA2C,aAA5BJ,EAAOI,YAAYQ,MACxC,0BAAMF,UAAU,SAAhB,sCAEDV,EAAOI,aAA2C,YAA5BJ,EAAOI,YAAYQ,MACxC,0BAAMF,UAAU,SAAhB,uDAKJ,2BAAOE,KAAK,SAASM,MAAM,W,iHCzDjC,IAAMC,EAAc1B,IAAO2B,IAAV,KA2BFC,EAtBD,SAAC,GAAqB,IAG5BnB,EAAO,CACX,CACEoB,MAAO,mBACPpB,KCfmB,SAACE,GACxB,IAAImB,EAAQ,GAGZ,GAFAA,EAAMC,KAAK,CAAC,EAAG,IAEK,IAAhBpB,EACF,OAAOmB,EAGT,GADAA,EAAMC,KAAK,CAAC,EAAG,IACK,IAAhBpB,EACF,OAAOmB,EAGT,IAAK,IAAIE,EAAI,EAAGA,GAAKrB,EAAaqB,IAChCF,EAAMC,KAAK,CAACC,EAAGF,EAAME,EAAI,GAAG,GAAKF,EAAME,EAAI,GAAG,KAEhD,OAAOF,EDLaG,CADa,EAAlBtB,eAef,OACE,kBAACe,EAAD,KACE,kBAAC,QAAD,CAAOjB,KAAMA,EAAMyB,KAPV,CACX,CAAEC,SAAS,EAAMhB,KAAM,SAAUiB,SAAU,UAC3C,CAAEjB,KAAM,SAAUiB,SAAU,a,6hBEhBhC,IAAMC,EAAYrC,IAAO2B,IAAV,KAuDAW,EAzBH,WAAO,IAAD,EACoBC,mBAAS,MAD7B,mBACX5B,EADW,KACE6B,EADF,KAMhB,OACE,kBAACH,EAAD,KACE,yCACA,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMd,eARS,SAACQ,GACtB6B,EAAe7B,OASX,yBAAKM,UAAU,OACZN,EACC,kBAAC,EAAD,CAAOA,YAAaA,EAAYA,cAEhC,0CCxCQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.e8bc0987.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nconst FormStyled = styled.form`\r\n  input[type=\"submit\"],\r\n  input[type=\"text\"] {\r\n    height: 3em;\r\n    line-height: 3em;\r\n    outline: none;\r\n  }\r\n  input[type=\"text\"] {\r\n    padding: 0 5px 0 5px;\r\n    width: 100%;\r\n    border: 1px solid #ccc;\r\n  }\r\n  input[type=\"text\"]:focus {\r\n    border: 1px solid #3f51b5;\r\n  }\r\n  input[type=\"submit\"] {\r\n    border: none;\r\n    background: #3f51b5;\r\n    color: #f1f1f1;\r\n    width: 33%;\r\n    transition: all 0.3s linear;\r\n    margin-top: 5px;\r\n  }\r\n  input[type=\"submit\"]:active {\r\n    transform: scale(0.8);\r\n  }\r\n  .error {\r\n    color: #dd2c00;\r\n  }\r\n`;\r\n\r\nconst Form = ({ addNiterations }) => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = (data, e) => {\r\n    data.nIterations = parseInt(data.nIterations);\r\n    console.log(data);\r\n    addNiterations(data);\r\n    e.target.reset();\r\n  };\r\n  return (\r\n    <FormStyled onSubmit={handleSubmit(onSubmit)}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"nIterations\">Number of Iterations *</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"nIterations\"\r\n          id=\"nIterations\"\r\n          ref={register({ required: true, pattern: /^\\d+$/ })}\r\n        />\r\n        {errors.nIterations && errors.nIterations.type === \"required\" && (\r\n          <span className=\"error\"> Number of Iterations is required </span>\r\n        )}\r\n        {errors.nIterations && errors.nIterations.type === \"pattern\" && (\r\n          <span className=\"error\">\r\n            the number of iterations must be a positive number\r\n          </span>\r\n        )}\r\n      </div>\r\n      <input type=\"submit\" value=\"Send\" />\r\n    </FormStyled>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Chart } from \"react-charts\";\r\nimport { fibonacci } from \"./helperMath\";\r\nconst GraphStyled = styled.div`\r\n  width: 100%;\r\n  height: 400px;\r\n`;\r\n\r\nconst Graph = ({ nIterations }) => {\r\n  let datafibonacci = fibonacci(nIterations);\r\n\r\n  const data = [\r\n    {\r\n      label: \"Series Fibonacci\",\r\n      data: datafibonacci,\r\n    },\r\n  ];\r\n\r\n  const axes = [\r\n    { primary: true, type: \"linear\", position: \"bottom\" },\r\n    { type: \"linear\", position: \"left\" },\r\n  ];\r\n\r\n  return (\r\n    <GraphStyled>\r\n      <Chart data={data} axes={axes} />\r\n    </GraphStyled>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","export const fibonacci = (nIterations) => {\r\n  let reply = [];\r\n  reply.push([1, 0]);\r\n\r\n  if (nIterations === 1) {\r\n    return reply;\r\n  }\r\n  reply.push([2, 1]);\r\n  if (nIterations === 2) {\r\n    return reply;\r\n  }\r\n\r\n  for (let i = 3; i <= nIterations; i++) {\r\n    reply.push([i, reply[i - 2][1] + reply[i - 3][1]]);\r\n  }\r\n  return reply;\r\n};\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Form from \"./components/form\";\nimport Graph from \"./components/graph\";\n\nconst AppStyled = styled.div`\n  margin: auto;\n\n  h1 {\n    text-align: center;\n    color: #f1f1f1;\n  }\n\n  .col {\n    background: #f1f1f1;\n    padding: 10px;\n    box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\n    margin-bottom: 10px;\n  }\n  h2 {\n    text-align: center;\n  }\n  @media screen and (min-width: 800px) {\n    width: 800px;\n    .row {\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-start;\n    }\n    .col {\n      width: 48%;\n    }\n  }\n`;\n\nconst App = () => {\n  let [nIterations, setnIterations] = useState(null);\n\n  const addNiterations = (nIterations) => {\n    setnIterations(nIterations);\n  };\n  return (\n    <AppStyled>\n      <h1>Fibonacci</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Form addNiterations={addNiterations} />\n        </div>\n        <div className=\"col\">\n          {nIterations ? (\n            <Graph nIterations={nIterations.nIterations} />\n          ) : (\n            <h2> Graph</h2>\n          )}\n        </div>\n      </div>\n    </AppStyled>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}